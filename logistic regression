{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["**Feature Engineering Task 1:**"],"metadata":{"id":"A778DI6lRT9Q"}},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","# Load the data from a CSV file\n","data = pd.read_csv(\"data.csv\")\n","\n","# Iterate through each column\n","for column in data.columns:\n","    # Check if the column has any missing or zero values\n","    if data[column].isna().sum() + (data[column] == 0).sum() > 0:\n","        # Check if the column is categorical\n","        if data[column].dtype == 'object':\n","            # Impute missing and zero values with the most frequent value\n","            mode_value = data[column].mode()[0]\n","            data[column].fillna(mode_value, inplace=True)\n","            data[column] = data[column].replace(0, mode_value)\n","           # print(\"Column '{}' has been updated. Missing or zero values before: {}. Missing or zero values after: {}. Imputed with value: {}\".format(column, data[column].isna().sum() + (data[column] == 0).sum(), data[column].isna().sum() + (data[column] == 0).sum(), mode_value))\n","        # Otherwise, assume it's a continuous numerical value\n","        else:\n","            # Impute missing and zero values with the mean value\n","            mean_value = data[column].replace(0, np.nan).mean()\n","            data[column].fillna(mean_value, inplace=True)\n","            data[column] = data[column].replace(0, mean_value)\n","          #  print(\"Column '{}' has been updated. Missing or zero values before: {}. Missing or zero values after: {}. Imputed with value: {}\".format(column, data[column].isna().sum() + (data[column] == 0).sum(), data[column].isna().sum() + (data[column] == 0).sum(), mean_value))\n","\n","# Save the updated data to the original CSV file\n","\n","data[\"diagnosis\"] = (data[\"diagnosis\"] ==\"M\").astype(int)\n","data.to_csv(\"data.csv\", index=False)\n","\n","# Print the updated data\n","# print(data[\"diagnosis\"])\n","display(data)\n"],"metadata":{"id":"VnBEJVGnLa8E","colab":{"base_uri":"https://localhost:8080/","height":505},"executionInfo":{"status":"ok","timestamp":1680158994672,"user_tz":-330,"elapsed":512,"user":{"displayName":"GAURAV KUMAR","userId":"09803550920517762681"}},"outputId":"e7975cde-68d1-4424-c871-dd5cbb6fc1f2"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["           id  diagnosis  radius_mean  texture_mean  perimeter_mean  \\\n","0      842302          0        17.99         10.38          122.80   \n","1      842517          0        20.57         17.77          132.90   \n","2    84300903          0        19.69         21.25          130.00   \n","3    84348301          0        11.42         20.38           77.58   \n","4    84358402          0        20.29         14.34          135.10   \n","..        ...        ...          ...           ...             ...   \n","564    926424          0        21.56         22.39          142.00   \n","565    926682          0        20.13         28.25          131.20   \n","566    926954          0        16.60         28.08          108.30   \n","567    927241          0        20.60         29.33          140.10   \n","568     92751          0         7.76         24.54           47.92   \n","\n","     area_mean  smoothness_mean  compactness_mean  concavity_mean  \\\n","0       1001.0          0.11840           0.27760        0.300100   \n","1       1326.0          0.08474           0.07864        0.086900   \n","2       1203.0          0.10960           0.15990        0.197400   \n","3        386.1          0.14250           0.28390        0.241400   \n","4       1297.0          0.10030           0.13280        0.198000   \n","..         ...              ...               ...             ...   \n","564     1479.0          0.11100           0.11590        0.243900   \n","565     1261.0          0.09780           0.10340        0.144000   \n","566      858.1          0.08455           0.10230        0.092510   \n","567     1265.0          0.11780           0.27700        0.351400   \n","568      181.0          0.05263           0.04362        0.091008   \n","\n","     concave points_mean  ...  radius_worst  texture_worst  perimeter_worst  \\\n","0               0.147100  ...        25.380          17.33           184.60   \n","1               0.070170  ...        24.990          23.41           158.80   \n","2               0.127900  ...        23.570          25.53           152.50   \n","3               0.105200  ...        14.910          26.50            98.87   \n","4               0.104300  ...        22.540          16.67           152.20   \n","..                   ...  ...           ...            ...              ...   \n","564             0.138900  ...        25.450          26.40           166.10   \n","565             0.097910  ...        23.690          38.25           155.00   \n","566             0.053020  ...        18.980          34.12           126.70   \n","567             0.152000  ...        25.740          39.42           184.60   \n","568             0.050063  ...         9.456          30.37            59.16   \n","\n","     area_worst  smoothness_worst  compactness_worst  concavity_worst  \\\n","0        2019.0           0.16220            0.66560         0.711900   \n","1        1956.0           0.12380            0.18660         0.241600   \n","2        1709.0           0.14440            0.42450         0.450400   \n","3         567.7           0.20980            0.86630         0.686900   \n","4        1575.0           0.13740            0.20500         0.400000   \n","..          ...               ...                ...              ...   \n","564      2027.0           0.14100            0.21130         0.410700   \n","565      1731.0           0.11660            0.19220         0.321500   \n","566      1124.0           0.11390            0.30940         0.340300   \n","567      1821.0           0.16500            0.86810         0.938700   \n","568       268.6           0.08996            0.06444         0.278837   \n","\n","     concave points_worst  symmetry_worst  fractal_dimension_worst  \n","0                0.265400          0.4601                  0.11890  \n","1                0.186000          0.2750                  0.08902  \n","2                0.243000          0.3613                  0.08758  \n","3                0.257500          0.6638                  0.17300  \n","4                0.162500          0.2364                  0.07678  \n","..                    ...             ...                      ...  \n","564              0.221600          0.2060                  0.07115  \n","565              0.162800          0.2572                  0.06637  \n","566              0.141800          0.2218                  0.07820  \n","567              0.265000          0.4087                  0.12400  \n","568              0.117286          0.2871                  0.07039  \n","\n","[569 rows x 32 columns]"],"text/html":["\n","  <div id=\"df-ffb7f379-1848-42c4-930e-769699ae7fad\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>diagnosis</th>\n","      <th>radius_mean</th>\n","      <th>texture_mean</th>\n","      <th>perimeter_mean</th>\n","      <th>area_mean</th>\n","      <th>smoothness_mean</th>\n","      <th>compactness_mean</th>\n","      <th>concavity_mean</th>\n","      <th>concave points_mean</th>\n","      <th>...</th>\n","      <th>radius_worst</th>\n","      <th>texture_worst</th>\n","      <th>perimeter_worst</th>\n","      <th>area_worst</th>\n","      <th>smoothness_worst</th>\n","      <th>compactness_worst</th>\n","      <th>concavity_worst</th>\n","      <th>concave points_worst</th>\n","      <th>symmetry_worst</th>\n","      <th>fractal_dimension_worst</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>842302</td>\n","      <td>0</td>\n","      <td>17.99</td>\n","      <td>10.38</td>\n","      <td>122.80</td>\n","      <td>1001.0</td>\n","      <td>0.11840</td>\n","      <td>0.27760</td>\n","      <td>0.300100</td>\n","      <td>0.147100</td>\n","      <td>...</td>\n","      <td>25.380</td>\n","      <td>17.33</td>\n","      <td>184.60</td>\n","      <td>2019.0</td>\n","      <td>0.16220</td>\n","      <td>0.66560</td>\n","      <td>0.711900</td>\n","      <td>0.265400</td>\n","      <td>0.4601</td>\n","      <td>0.11890</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>842517</td>\n","      <td>0</td>\n","      <td>20.57</td>\n","      <td>17.77</td>\n","      <td>132.90</td>\n","      <td>1326.0</td>\n","      <td>0.08474</td>\n","      <td>0.07864</td>\n","      <td>0.086900</td>\n","      <td>0.070170</td>\n","      <td>...</td>\n","      <td>24.990</td>\n","      <td>23.41</td>\n","      <td>158.80</td>\n","      <td>1956.0</td>\n","      <td>0.12380</td>\n","      <td>0.18660</td>\n","      <td>0.241600</td>\n","      <td>0.186000</td>\n","      <td>0.2750</td>\n","      <td>0.08902</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>84300903</td>\n","      <td>0</td>\n","      <td>19.69</td>\n","      <td>21.25</td>\n","      <td>130.00</td>\n","      <td>1203.0</td>\n","      <td>0.10960</td>\n","      <td>0.15990</td>\n","      <td>0.197400</td>\n","      <td>0.127900</td>\n","      <td>...</td>\n","      <td>23.570</td>\n","      <td>25.53</td>\n","      <td>152.50</td>\n","      <td>1709.0</td>\n","      <td>0.14440</td>\n","      <td>0.42450</td>\n","      <td>0.450400</td>\n","      <td>0.243000</td>\n","      <td>0.3613</td>\n","      <td>0.08758</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>84348301</td>\n","      <td>0</td>\n","      <td>11.42</td>\n","      <td>20.38</td>\n","      <td>77.58</td>\n","      <td>386.1</td>\n","      <td>0.14250</td>\n","      <td>0.28390</td>\n","      <td>0.241400</td>\n","      <td>0.105200</td>\n","      <td>...</td>\n","      <td>14.910</td>\n","      <td>26.50</td>\n","      <td>98.87</td>\n","      <td>567.7</td>\n","      <td>0.20980</td>\n","      <td>0.86630</td>\n","      <td>0.686900</td>\n","      <td>0.257500</td>\n","      <td>0.6638</td>\n","      <td>0.17300</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>84358402</td>\n","      <td>0</td>\n","      <td>20.29</td>\n","      <td>14.34</td>\n","      <td>135.10</td>\n","      <td>1297.0</td>\n","      <td>0.10030</td>\n","      <td>0.13280</td>\n","      <td>0.198000</td>\n","      <td>0.104300</td>\n","      <td>...</td>\n","      <td>22.540</td>\n","      <td>16.67</td>\n","      <td>152.20</td>\n","      <td>1575.0</td>\n","      <td>0.13740</td>\n","      <td>0.20500</td>\n","      <td>0.400000</td>\n","      <td>0.162500</td>\n","      <td>0.2364</td>\n","      <td>0.07678</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>564</th>\n","      <td>926424</td>\n","      <td>0</td>\n","      <td>21.56</td>\n","      <td>22.39</td>\n","      <td>142.00</td>\n","      <td>1479.0</td>\n","      <td>0.11100</td>\n","      <td>0.11590</td>\n","      <td>0.243900</td>\n","      <td>0.138900</td>\n","      <td>...</td>\n","      <td>25.450</td>\n","      <td>26.40</td>\n","      <td>166.10</td>\n","      <td>2027.0</td>\n","      <td>0.14100</td>\n","      <td>0.21130</td>\n","      <td>0.410700</td>\n","      <td>0.221600</td>\n","      <td>0.2060</td>\n","      <td>0.07115</td>\n","    </tr>\n","    <tr>\n","      <th>565</th>\n","      <td>926682</td>\n","      <td>0</td>\n","      <td>20.13</td>\n","      <td>28.25</td>\n","      <td>131.20</td>\n","      <td>1261.0</td>\n","      <td>0.09780</td>\n","      <td>0.10340</td>\n","      <td>0.144000</td>\n","      <td>0.097910</td>\n","      <td>...</td>\n","      <td>23.690</td>\n","      <td>38.25</td>\n","      <td>155.00</td>\n","      <td>1731.0</td>\n","      <td>0.11660</td>\n","      <td>0.19220</td>\n","      <td>0.321500</td>\n","      <td>0.162800</td>\n","      <td>0.2572</td>\n","      <td>0.06637</td>\n","    </tr>\n","    <tr>\n","      <th>566</th>\n","      <td>926954</td>\n","      <td>0</td>\n","      <td>16.60</td>\n","      <td>28.08</td>\n","      <td>108.30</td>\n","      <td>858.1</td>\n","      <td>0.08455</td>\n","      <td>0.10230</td>\n","      <td>0.092510</td>\n","      <td>0.053020</td>\n","      <td>...</td>\n","      <td>18.980</td>\n","      <td>34.12</td>\n","      <td>126.70</td>\n","      <td>1124.0</td>\n","      <td>0.11390</td>\n","      <td>0.30940</td>\n","      <td>0.340300</td>\n","      <td>0.141800</td>\n","      <td>0.2218</td>\n","      <td>0.07820</td>\n","    </tr>\n","    <tr>\n","      <th>567</th>\n","      <td>927241</td>\n","      <td>0</td>\n","      <td>20.60</td>\n","      <td>29.33</td>\n","      <td>140.10</td>\n","      <td>1265.0</td>\n","      <td>0.11780</td>\n","      <td>0.27700</td>\n","      <td>0.351400</td>\n","      <td>0.152000</td>\n","      <td>...</td>\n","      <td>25.740</td>\n","      <td>39.42</td>\n","      <td>184.60</td>\n","      <td>1821.0</td>\n","      <td>0.16500</td>\n","      <td>0.86810</td>\n","      <td>0.938700</td>\n","      <td>0.265000</td>\n","      <td>0.4087</td>\n","      <td>0.12400</td>\n","    </tr>\n","    <tr>\n","      <th>568</th>\n","      <td>92751</td>\n","      <td>0</td>\n","      <td>7.76</td>\n","      <td>24.54</td>\n","      <td>47.92</td>\n","      <td>181.0</td>\n","      <td>0.05263</td>\n","      <td>0.04362</td>\n","      <td>0.091008</td>\n","      <td>0.050063</td>\n","      <td>...</td>\n","      <td>9.456</td>\n","      <td>30.37</td>\n","      <td>59.16</td>\n","      <td>268.6</td>\n","      <td>0.08996</td>\n","      <td>0.06444</td>\n","      <td>0.278837</td>\n","      <td>0.117286</td>\n","      <td>0.2871</td>\n","      <td>0.07039</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>569 rows × 32 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ffb7f379-1848-42c4-930e-769699ae7fad')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-ffb7f379-1848-42c4-930e-769699ae7fad button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-ffb7f379-1848-42c4-930e-769699ae7fad');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{}}]},{"cell_type":"markdown","source":["**Feature Engineering Task 2:**"],"metadata":{"id":"JqOvk_qBRTH4"}},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","\n","# load the dataset as a Pandas DataFrame\n","df = pd.read_csv('data.csv')\n","\n","# extract the numeric columns except the first two columns and convert to a Numpy array\n","numeric_cols = df.iloc[:, 2:].select_dtypes(include=[np.number]).columns\n","dataset = df[numeric_cols].values\n","\n","# calculate the mean and standard deviation of each feature\n","mu = np.mean(dataset, axis=0)\n","sigma = np.std(dataset, axis=0)\n","\n","# apply feature normalization\n","normalized_dataset = (dataset - mu) / sigma\n","\n","# update the original DataFrame with the normalized values\n","df.loc[:, numeric_cols] = normalized_dataset\n","\n","# save the normalized dataset back to the normData.csv file\n","df.to_csv('normData.csv', index=False)\n","\n","display(data)"],"metadata":{"id":"k67BTzfIHQjj","colab":{"base_uri":"https://localhost:8080/","height":505},"executionInfo":{"status":"ok","timestamp":1680159018139,"user_tz":-330,"elapsed":14,"user":{"displayName":"GAURAV KUMAR","userId":"09803550920517762681"}},"outputId":"7196acfe-176b-4b8d-ed76-0625280205df"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["           id  diagnosis  radius_mean  texture_mean  perimeter_mean  \\\n","0      842302          0        17.99         10.38          122.80   \n","1      842517          0        20.57         17.77          132.90   \n","2    84300903          0        19.69         21.25          130.00   \n","3    84348301          0        11.42         20.38           77.58   \n","4    84358402          0        20.29         14.34          135.10   \n","..        ...        ...          ...           ...             ...   \n","564    926424          0        21.56         22.39          142.00   \n","565    926682          0        20.13         28.25          131.20   \n","566    926954          0        16.60         28.08          108.30   \n","567    927241          0        20.60         29.33          140.10   \n","568     92751          0         7.76         24.54           47.92   \n","\n","     area_mean  smoothness_mean  compactness_mean  concavity_mean  \\\n","0       1001.0          0.11840           0.27760        0.300100   \n","1       1326.0          0.08474           0.07864        0.086900   \n","2       1203.0          0.10960           0.15990        0.197400   \n","3        386.1          0.14250           0.28390        0.241400   \n","4       1297.0          0.10030           0.13280        0.198000   \n","..         ...              ...               ...             ...   \n","564     1479.0          0.11100           0.11590        0.243900   \n","565     1261.0          0.09780           0.10340        0.144000   \n","566      858.1          0.08455           0.10230        0.092510   \n","567     1265.0          0.11780           0.27700        0.351400   \n","568      181.0          0.05263           0.04362        0.091008   \n","\n","     concave points_mean  ...  radius_worst  texture_worst  perimeter_worst  \\\n","0               0.147100  ...        25.380          17.33           184.60   \n","1               0.070170  ...        24.990          23.41           158.80   \n","2               0.127900  ...        23.570          25.53           152.50   \n","3               0.105200  ...        14.910          26.50            98.87   \n","4               0.104300  ...        22.540          16.67           152.20   \n","..                   ...  ...           ...            ...              ...   \n","564             0.138900  ...        25.450          26.40           166.10   \n","565             0.097910  ...        23.690          38.25           155.00   \n","566             0.053020  ...        18.980          34.12           126.70   \n","567             0.152000  ...        25.740          39.42           184.60   \n","568             0.050063  ...         9.456          30.37            59.16   \n","\n","     area_worst  smoothness_worst  compactness_worst  concavity_worst  \\\n","0        2019.0           0.16220            0.66560         0.711900   \n","1        1956.0           0.12380            0.18660         0.241600   \n","2        1709.0           0.14440            0.42450         0.450400   \n","3         567.7           0.20980            0.86630         0.686900   \n","4        1575.0           0.13740            0.20500         0.400000   \n","..          ...               ...                ...              ...   \n","564      2027.0           0.14100            0.21130         0.410700   \n","565      1731.0           0.11660            0.19220         0.321500   \n","566      1124.0           0.11390            0.30940         0.340300   \n","567      1821.0           0.16500            0.86810         0.938700   \n","568       268.6           0.08996            0.06444         0.278837   \n","\n","     concave points_worst  symmetry_worst  fractal_dimension_worst  \n","0                0.265400          0.4601                  0.11890  \n","1                0.186000          0.2750                  0.08902  \n","2                0.243000          0.3613                  0.08758  \n","3                0.257500          0.6638                  0.17300  \n","4                0.162500          0.2364                  0.07678  \n","..                    ...             ...                      ...  \n","564              0.221600          0.2060                  0.07115  \n","565              0.162800          0.2572                  0.06637  \n","566              0.141800          0.2218                  0.07820  \n","567              0.265000          0.4087                  0.12400  \n","568              0.117286          0.2871                  0.07039  \n","\n","[569 rows x 32 columns]"],"text/html":["\n","  <div id=\"df-6203144b-c67e-43e2-bac7-7f82da24c637\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>diagnosis</th>\n","      <th>radius_mean</th>\n","      <th>texture_mean</th>\n","      <th>perimeter_mean</th>\n","      <th>area_mean</th>\n","      <th>smoothness_mean</th>\n","      <th>compactness_mean</th>\n","      <th>concavity_mean</th>\n","      <th>concave points_mean</th>\n","      <th>...</th>\n","      <th>radius_worst</th>\n","      <th>texture_worst</th>\n","      <th>perimeter_worst</th>\n","      <th>area_worst</th>\n","      <th>smoothness_worst</th>\n","      <th>compactness_worst</th>\n","      <th>concavity_worst</th>\n","      <th>concave points_worst</th>\n","      <th>symmetry_worst</th>\n","      <th>fractal_dimension_worst</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>842302</td>\n","      <td>0</td>\n","      <td>17.99</td>\n","      <td>10.38</td>\n","      <td>122.80</td>\n","      <td>1001.0</td>\n","      <td>0.11840</td>\n","      <td>0.27760</td>\n","      <td>0.300100</td>\n","      <td>0.147100</td>\n","      <td>...</td>\n","      <td>25.380</td>\n","      <td>17.33</td>\n","      <td>184.60</td>\n","      <td>2019.0</td>\n","      <td>0.16220</td>\n","      <td>0.66560</td>\n","      <td>0.711900</td>\n","      <td>0.265400</td>\n","      <td>0.4601</td>\n","      <td>0.11890</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>842517</td>\n","      <td>0</td>\n","      <td>20.57</td>\n","      <td>17.77</td>\n","      <td>132.90</td>\n","      <td>1326.0</td>\n","      <td>0.08474</td>\n","      <td>0.07864</td>\n","      <td>0.086900</td>\n","      <td>0.070170</td>\n","      <td>...</td>\n","      <td>24.990</td>\n","      <td>23.41</td>\n","      <td>158.80</td>\n","      <td>1956.0</td>\n","      <td>0.12380</td>\n","      <td>0.18660</td>\n","      <td>0.241600</td>\n","      <td>0.186000</td>\n","      <td>0.2750</td>\n","      <td>0.08902</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>84300903</td>\n","      <td>0</td>\n","      <td>19.69</td>\n","      <td>21.25</td>\n","      <td>130.00</td>\n","      <td>1203.0</td>\n","      <td>0.10960</td>\n","      <td>0.15990</td>\n","      <td>0.197400</td>\n","      <td>0.127900</td>\n","      <td>...</td>\n","      <td>23.570</td>\n","      <td>25.53</td>\n","      <td>152.50</td>\n","      <td>1709.0</td>\n","      <td>0.14440</td>\n","      <td>0.42450</td>\n","      <td>0.450400</td>\n","      <td>0.243000</td>\n","      <td>0.3613</td>\n","      <td>0.08758</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>84348301</td>\n","      <td>0</td>\n","      <td>11.42</td>\n","      <td>20.38</td>\n","      <td>77.58</td>\n","      <td>386.1</td>\n","      <td>0.14250</td>\n","      <td>0.28390</td>\n","      <td>0.241400</td>\n","      <td>0.105200</td>\n","      <td>...</td>\n","      <td>14.910</td>\n","      <td>26.50</td>\n","      <td>98.87</td>\n","      <td>567.7</td>\n","      <td>0.20980</td>\n","      <td>0.86630</td>\n","      <td>0.686900</td>\n","      <td>0.257500</td>\n","      <td>0.6638</td>\n","      <td>0.17300</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>84358402</td>\n","      <td>0</td>\n","      <td>20.29</td>\n","      <td>14.34</td>\n","      <td>135.10</td>\n","      <td>1297.0</td>\n","      <td>0.10030</td>\n","      <td>0.13280</td>\n","      <td>0.198000</td>\n","      <td>0.104300</td>\n","      <td>...</td>\n","      <td>22.540</td>\n","      <td>16.67</td>\n","      <td>152.20</td>\n","      <td>1575.0</td>\n","      <td>0.13740</td>\n","      <td>0.20500</td>\n","      <td>0.400000</td>\n","      <td>0.162500</td>\n","      <td>0.2364</td>\n","      <td>0.07678</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>564</th>\n","      <td>926424</td>\n","      <td>0</td>\n","      <td>21.56</td>\n","      <td>22.39</td>\n","      <td>142.00</td>\n","      <td>1479.0</td>\n","      <td>0.11100</td>\n","      <td>0.11590</td>\n","      <td>0.243900</td>\n","      <td>0.138900</td>\n","      <td>...</td>\n","      <td>25.450</td>\n","      <td>26.40</td>\n","      <td>166.10</td>\n","      <td>2027.0</td>\n","      <td>0.14100</td>\n","      <td>0.21130</td>\n","      <td>0.410700</td>\n","      <td>0.221600</td>\n","      <td>0.2060</td>\n","      <td>0.07115</td>\n","    </tr>\n","    <tr>\n","      <th>565</th>\n","      <td>926682</td>\n","      <td>0</td>\n","      <td>20.13</td>\n","      <td>28.25</td>\n","      <td>131.20</td>\n","      <td>1261.0</td>\n","      <td>0.09780</td>\n","      <td>0.10340</td>\n","      <td>0.144000</td>\n","      <td>0.097910</td>\n","      <td>...</td>\n","      <td>23.690</td>\n","      <td>38.25</td>\n","      <td>155.00</td>\n","      <td>1731.0</td>\n","      <td>0.11660</td>\n","      <td>0.19220</td>\n","      <td>0.321500</td>\n","      <td>0.162800</td>\n","      <td>0.2572</td>\n","      <td>0.06637</td>\n","    </tr>\n","    <tr>\n","      <th>566</th>\n","      <td>926954</td>\n","      <td>0</td>\n","      <td>16.60</td>\n","      <td>28.08</td>\n","      <td>108.30</td>\n","      <td>858.1</td>\n","      <td>0.08455</td>\n","      <td>0.10230</td>\n","      <td>0.092510</td>\n","      <td>0.053020</td>\n","      <td>...</td>\n","      <td>18.980</td>\n","      <td>34.12</td>\n","      <td>126.70</td>\n","      <td>1124.0</td>\n","      <td>0.11390</td>\n","      <td>0.30940</td>\n","      <td>0.340300</td>\n","      <td>0.141800</td>\n","      <td>0.2218</td>\n","      <td>0.07820</td>\n","    </tr>\n","    <tr>\n","      <th>567</th>\n","      <td>927241</td>\n","      <td>0</td>\n","      <td>20.60</td>\n","      <td>29.33</td>\n","      <td>140.10</td>\n","      <td>1265.0</td>\n","      <td>0.11780</td>\n","      <td>0.27700</td>\n","      <td>0.351400</td>\n","      <td>0.152000</td>\n","      <td>...</td>\n","      <td>25.740</td>\n","      <td>39.42</td>\n","      <td>184.60</td>\n","      <td>1821.0</td>\n","      <td>0.16500</td>\n","      <td>0.86810</td>\n","      <td>0.938700</td>\n","      <td>0.265000</td>\n","      <td>0.4087</td>\n","      <td>0.12400</td>\n","    </tr>\n","    <tr>\n","      <th>568</th>\n","      <td>92751</td>\n","      <td>0</td>\n","      <td>7.76</td>\n","      <td>24.54</td>\n","      <td>47.92</td>\n","      <td>181.0</td>\n","      <td>0.05263</td>\n","      <td>0.04362</td>\n","      <td>0.091008</td>\n","      <td>0.050063</td>\n","      <td>...</td>\n","      <td>9.456</td>\n","      <td>30.37</td>\n","      <td>59.16</td>\n","      <td>268.6</td>\n","      <td>0.08996</td>\n","      <td>0.06444</td>\n","      <td>0.278837</td>\n","      <td>0.117286</td>\n","      <td>0.2871</td>\n","      <td>0.07039</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>569 rows × 32 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6203144b-c67e-43e2-bac7-7f82da24c637')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-6203144b-c67e-43e2-bac7-7f82da24c637 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-6203144b-c67e-43e2-bac7-7f82da24c637');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{}}]},{"cell_type":"markdown","source":["**Learning Task 1:**"],"metadata":{"id":"DapL1yq-yPQz"}},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","\n","# Load data from file\n","data = pd.read_csv('data.csv')\n","data = data.drop(columns=['id'])  # Drop the Id column\n","X = data.iloc[:, 1:].values\n","y = data.iloc[:, 0].values\n","\n","# Split data into training and testing sets\n","m = len(y)\n","indices = np.random.permutation(m)\n","train_indices, test_indices = indices[:int(0.67*m)], indices[int(0.67*m):]\n","train_X, train_y = X[train_indices], y[train_indices]\n","test_X, test_y = X[test_indices], y[test_indices]\n","\n","def sigmoid(z):\n","    return 1 / (1 + np.exp(-z))\n","\n","\n","# Define the cost function\n","def compute_cost(X, y, theta):\n","    m = len(y)\n","    h = sigmoid(np.dot(X, theta))\n","    cost = (-1/m) * np.sum(y*np.log(h) + (1-y)*np.log(1-h))\n","    return cost\n","\n","    # Batch Gradient Descent\n","def batch_gradient_descent(X, y, alpha=0.01, num_iters=1000):\n","    m, n = X.shape\n","    theta = np.zeros(n)\n","    cost_history = []\n","    \n","    for i in range(num_iters):\n","        h = sigmoid(np.dot(X, theta))\n","        error = h - y\n","        gradient = (1/m) * np.dot(X.T, error)\n","        theta -= alpha * gradient\n","        cost = compute_cost(X, y, theta)\n","        cost_history.append(cost)\n","    \n","    return theta, cost_history\n","# Mini-batch Gradient Descent\n","def minibatch_gradient_descent(X, y, batch_size=32, alpha=0.01, num_iters=1000):\n","    m, n = X.shape\n","    theta = np.zeros(n)\n","    cost_history = []\n","    \n","    for i in range(num_iters):\n","        indices = np.random.randint(m, size=batch_size)\n","        X_batch, y_batch = X[indices], y[indices]\n","        h = sigmoid(np.dot(X_batch, theta))\n","        error = h - y_batch\n","        gradient = (1/batch_size) * np.dot(X_batch.T, error)\n","        theta -= alpha * gradient\n","        cost = compute_cost(X, y, theta)\n","        cost_history.append(cost)\n","    \n","    return theta, cost_history\n","# Stochastic Gradient Descent\n","def stochastic_gradient_descent(X, y, alpha=0.01, num_iters=1000):\n","    m, n = X.shape\n","    theta = np.zeros(n)\n","    cost_history = []\n","    \n","    for i in range(num_iters):\n","        for j in range(m):\n","            X_j, y_j = X[j], y[j]\n","            h = sigmoid(np.dot(X_j, theta))\n","            error = h - y_j\n","            gradient = error * X_j\n","            theta -= alpha * gradient\n","            cost = compute_cost(X, y, theta)\n","            cost_history.append(cost)\n","    \n","    return theta, cost_history\n","\n","# Predict function\n","def predict(X, theta, threshold=0.5):\n","    probabilities = sigmoid(np.dot(X, theta))\n","    predictions = (probabilities >= threshold).astype(int)\n","    return predictions\n","\n","# Test accuracy function\n","def test_accuracy(X, y, theta, threshold=0.5):\n","    predictions = predict(X, theta, threshold)\n","    accuracy = np.mean(predictions == y)\n","    return accuracy\n","\n","\n","    # Train the logistic regression models using batch gradient descent, mini-batch gradient descent, and stochastic gradient descent\n","learning_rates = [0.01, 0.001, 0.0001]\n","num_iters = 1000\n","batch_size = 32\n","thresholds = [0.3, 0.4, 0.5, 0.6, 0.7]\n","\n","models = {}\n","\n","for lr in learning_rates:\n","    models[f'BGD {lr}'] = batch_gradient_descent(train_X, train_y, alpha=lr, num_iters=num_iters)\n","    models[f'MBGD {lr}'] = minibatch_gradient_descent(train_X, train_y, batch_size=batch_size, alpha=lr, num_iters=num_iters)\n","    models[f'SGD {lr}'] = stochastic_gradient_descent(train_X, train_y, alpha=lr, num_iters=num_iters)\n","\n","# Evaluate testing accuracy for each model and threshold\n","accuracies = {}\n","for key, value in models.items():\n","    theta = value[0]\n","    for threshold in thresholds:\n","        accuracy = test_accuracy(test_X, test_y, theta, threshold)\n","        accuracies[f'{key} {threshold}'] = accuracy\n","\n","# Print the accuracies\n","for key, value in accuracies.items():\n","    print(f'{key}: {value}')\n","\n","# Plot the learning curves for each model\n","for key, value in models.items():\n","    plt.plot(value[1], label=key)\n","plt.title('Learning Curves')\n","plt.xlabel('Number of Iterations')\n","plt.ylabel('Cost')\n","plt.legend()\n","plt.show()"],"metadata":{"id":"bG_u6deAWIZr","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1680162331858,"user_tz":-330,"elapsed":104992,"user":{"displayName":"GAURAV KUMAR","userId":"09803550920517762681"}},"outputId":"37684fb4-91ad-453e-f898-a85ac7196ac4"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-5-f7111b8f39d9>:19: RuntimeWarning: overflow encountered in exp\n","  return 1 / (1 + np.exp(-z))\n","<ipython-input-5-f7111b8f39d9>:26: RuntimeWarning: divide by zero encountered in log\n","  cost = (-1/m) * np.sum(y*np.log(h) + (1-y)*np.log(1-h))\n","<ipython-input-5-f7111b8f39d9>:26: RuntimeWarning: invalid value encountered in multiply\n","  cost = (-1/m) * np.sum(y*np.log(h) + (1-y)*np.log(1-h))\n"]},{"output_type":"stream","name":"stdout","text":["BGD 0.01 0.3: 1.0\n","BGD 0.01 0.4: 1.0\n","BGD 0.01 0.5: 1.0\n","BGD 0.01 0.6: 1.0\n","BGD 0.01 0.7: 1.0\n","MBGD 0.01 0.3: 1.0\n","MBGD 0.01 0.4: 1.0\n","MBGD 0.01 0.5: 1.0\n","MBGD 0.01 0.6: 1.0\n","MBGD 0.01 0.7: 1.0\n","SGD 0.01 0.3: 1.0\n","SGD 0.01 0.4: 1.0\n","SGD 0.01 0.5: 1.0\n","SGD 0.01 0.6: 1.0\n","SGD 0.01 0.7: 1.0\n","BGD 0.001 0.3: 1.0\n","BGD 0.001 0.4: 1.0\n","BGD 0.001 0.5: 1.0\n","BGD 0.001 0.6: 1.0\n","BGD 0.001 0.7: 1.0\n","MBGD 0.001 0.3: 1.0\n","MBGD 0.001 0.4: 1.0\n","MBGD 0.001 0.5: 1.0\n","MBGD 0.001 0.6: 1.0\n","MBGD 0.001 0.7: 1.0\n","SGD 0.001 0.3: 1.0\n","SGD 0.001 0.4: 1.0\n","SGD 0.001 0.5: 1.0\n","SGD 0.001 0.6: 1.0\n","SGD 0.001 0.7: 1.0\n","BGD 0.0001 0.3: 1.0\n","BGD 0.0001 0.4: 1.0\n","BGD 0.0001 0.5: 1.0\n","BGD 0.0001 0.6: 1.0\n","BGD 0.0001 0.7: 1.0\n","MBGD 0.0001 0.3: 1.0\n","MBGD 0.0001 0.4: 1.0\n","MBGD 0.0001 0.5: 1.0\n","MBGD 0.0001 0.6: 1.0\n","MBGD 0.0001 0.7: 1.0\n","SGD 0.0001 0.3: 1.0\n","SGD 0.0001 0.4: 1.0\n","SGD 0.0001 0.5: 1.0\n","SGD 0.0001 0.6: 1.0\n","SGD 0.0001 0.7: 1.0\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":[],"metadata":{"id":"t5RDmYsVRzQT"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**Learning task 2: **\n","\n"],"metadata":{"id":"SDUOETSgw0qg"}},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","\n","# Load data from file\n","data = pd.read_csv('normData.csv')\n","data = data.drop(columns=['id'])  # Drop the Id column\n","X = data.iloc[:, 1:].values\n","y = data.iloc[:, 0].values\n","\n","# Split data into training and testing sets\n","m = len(y)\n","indices = np.random.permutation(m)\n","train_indices, test_indices = indices[:int(0.67*m)], indices[int(0.67*m):]\n","train_X, train_y = X[train_indices], y[train_indices]\n","test_X, test_y = X[test_indices], y[test_indices]\n","\n","def sigmoid(z):\n","    return 1 / (1 + np.exp(-z))\n","\n","\n","# Define the cost function\n","def compute_cost(X, y, theta):\n","    m = len(y)\n","    h = sigmoid(np.dot(X, theta))\n","    cost = (-1/m) * np.sum(y*np.log(h) + (1-y)*np.log(1-h))\n","    return cost\n","\n","    # Batch Gradient Descent\n","def batch_gradient_descent(X, y, alpha=0.01, num_iters=1000):\n","    m, n = X.shape\n","    theta = np.zeros(n)\n","    cost_history = []\n","    \n","    for i in range(num_iters):\n","        h = sigmoid(np.dot(X, theta))\n","        error = h - y\n","        gradient = (1/m) * np.dot(X.T, error)\n","        theta -= alpha * gradient\n","        cost = compute_cost(X, y, theta)\n","        cost_history.append(cost)\n","    \n","    return theta, cost_history\n","# Mini-batch Gradient Descent\n","def minibatch_gradient_descent(X, y, batch_size=32, alpha=0.01, num_iters=1000):\n","    m, n = X.shape\n","    theta = np.zeros(n)\n","    cost_history = []\n","    \n","    for i in range(num_iters):\n","        indices = np.random.randint(m, size=batch_size)\n","        X_batch, y_batch = X[indices], y[indices]\n","        h = sigmoid(np.dot(X_batch, theta))\n","        error = h - y_batch\n","        gradient = (1/batch_size) * np.dot(X_batch.T, error)\n","        theta -= alpha * gradient\n","        cost = compute_cost(X, y, theta)\n","        cost_history.append(cost)\n","    \n","    return theta, cost_history\n","# Stochastic Gradient Descent\n","def stochastic_gradient_descent(X, y, alpha=0.01, num_iters=1000):\n","    m, n = X.shape\n","    theta = np.zeros(n)\n","    cost_history = []\n","    \n","    for i in range(num_iters):\n","        for j in range(m):\n","            X_j, y_j = X[j], y[j]\n","            h = sigmoid(np.dot(X_j, theta))\n","            error = h - y_j\n","            gradient = error * X_j\n","            theta -= alpha * gradient\n","            cost = compute_cost(X, y, theta)\n","            cost_history.append(cost)\n","    \n","    return theta, cost_history\n","\n","# Predict function\n","def predict(X, theta, threshold=0.5):\n","    probabilities = sigmoid(np.dot(X, theta))\n","    predictions = (probabilities >= threshold).astype(int)\n","    return predictions\n","\n","# Test accuracy function\n","def test_accuracy(X, y, theta, threshold=0.5):\n","    predictions = predict(X, theta, threshold)\n","    accuracy = np.mean(predictions == y)\n","    return accuracy\n","\n","\n","    # Train the logistic regression models using batch gradient descent, mini-batch gradient descent, and stochastic gradient descent\n","learning_rates = [0.01, 0.001, 0.0001]\n","num_iters = 1000\n","batch_size = 32\n","thresholds = [0.3, 0.4, 0.5, 0.6, 0.7]\n","\n","models = {}\n","\n","for lr in learning_rates:\n","    models[f'BGD {lr}'] = batch_gradient_descent(train_X, train_y, alpha=lr, num_iters=num_iters)\n","    models[f'MBGD {lr}'] = minibatch_gradient_descent(train_X, train_y, batch_size=batch_size, alpha=lr, num_iters=num_iters)\n","    models[f'SGD {lr}'] = stochastic_gradient_descent(train_X, train_y, alpha=lr, num_iters=num_iters)\n","\n","# Evaluate testing accuracy for each model and threshold\n","accuracies = {}\n","for key, value in models.items():\n","    theta = value[0]\n","    for threshold in thresholds:\n","        accuracy = test_accuracy(test_X, test_y, theta, threshold)\n","        accuracies[f'{key} {threshold}'] = accuracy\n","\n","# Print the accuracies\n","for key, value in accuracies.items():\n","    print(f'{key}: {value}')\n","\n","# Plot the learning curves for each model\n","for key, value in models.items():\n","    plt.plot(value[1], label=key)\n","plt.title('Learning Curves')\n","plt.xlabel('Number of Iterations')\n","plt.ylabel('Cost')\n","plt.legend()\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"UnaoBGEYWIg6","executionInfo":{"status":"ok","timestamp":1679840813550,"user_tz":-330,"elapsed":124708,"user":{"displayName":"Satyam Gupta","userId":"14257552402479889297"}},"outputId":"515bfa36-59f3-450d-d533-5bf2983ce106"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-4-4a87b949ab99>:26: RuntimeWarning: divide by zero encountered in log\n","  cost = (-1/m) * np.sum(y*np.log(h) + (1-y)*np.log(1-h))\n","<ipython-input-4-4a87b949ab99>:26: RuntimeWarning: invalid value encountered in multiply\n","  cost = (-1/m) * np.sum(y*np.log(h) + (1-y)*np.log(1-h))\n"]},{"output_type":"stream","name":"stdout","text":["BGD 0.01 0.3: 0.9308510638297872\n","BGD 0.01 0.4: 0.9627659574468085\n","BGD 0.01 0.5: 0.973404255319149\n","BGD 0.01 0.6: 0.9840425531914894\n","BGD 0.01 0.7: 0.973404255319149\n","MBGD 0.01 0.3: 0.9361702127659575\n","MBGD 0.01 0.4: 0.9627659574468085\n","MBGD 0.01 0.5: 0.973404255319149\n","MBGD 0.01 0.6: 0.9840425531914894\n","MBGD 0.01 0.7: 0.973404255319149\n","SGD 0.01 0.3: 0.9521276595744681\n","SGD 0.01 0.4: 0.9521276595744681\n","SGD 0.01 0.5: 0.9521276595744681\n","SGD 0.01 0.6: 0.9468085106382979\n","SGD 0.01 0.7: 0.9468085106382979\n","BGD 0.001 0.3: 0.8457446808510638\n","BGD 0.001 0.4: 0.925531914893617\n","BGD 0.001 0.5: 0.9627659574468085\n","BGD 0.001 0.6: 0.9574468085106383\n","BGD 0.001 0.7: 0.9361702127659575\n","MBGD 0.001 0.3: 0.8404255319148937\n","MBGD 0.001 0.4: 0.925531914893617\n","MBGD 0.001 0.5: 0.9627659574468085\n","MBGD 0.001 0.6: 0.9574468085106383\n","MBGD 0.001 0.7: 0.9361702127659575\n","SGD 0.001 0.3: 0.9627659574468085\n","SGD 0.001 0.4: 0.973404255319149\n","SGD 0.001 0.5: 0.9840425531914894\n","SGD 0.001 0.6: 0.9840425531914894\n","SGD 0.001 0.7: 0.9787234042553191\n","BGD 0.0001 0.3: 0.3776595744680851\n","BGD 0.0001 0.4: 0.5053191489361702\n","BGD 0.0001 0.5: 0.9468085106382979\n","BGD 0.0001 0.6: 0.8351063829787234\n","BGD 0.0001 0.7: 0.648936170212766\n","MBGD 0.0001 0.3: 0.3776595744680851\n","MBGD 0.0001 0.4: 0.5053191489361702\n","MBGD 0.0001 0.5: 0.9468085106382979\n","MBGD 0.0001 0.6: 0.8297872340425532\n","MBGD 0.0001 0.7: 0.648936170212766\n","SGD 0.0001 0.3: 0.9521276595744681\n","SGD 0.0001 0.4: 0.9574468085106383\n","SGD 0.0001 0.5: 0.9840425531914894\n","SGD 0.0001 0.6: 0.9840425531914894\n","SGD 0.0001 0.7: 0.9840425531914894\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","\n","# Load data from file\n","data = pd.read_csv('data.csv')\n","data = data.drop(columns=['id'])  # Drop the Id column\n","X = data.iloc[:, 1:].values\n","y = data.iloc[:, 0].values\n","\n","# Initialize performance metrics arrays\n","accuracies = np.zeros((3, 5, 10))\n","cost_history = np.zeros((3, 1000, 10))\n","\n","# Loop over 10 random splits and store performance metrics\n","for i in range(10):\n","    # Split data into training and testing sets\n","    m = len(y)\n","    indices = np.random.permutation(m)\n","    train_indices, test_indices = indices[:int(0.67*m)], indices[int(0.67*m):]\n","    train_X, train_y = X[train_indices], y[train_indices]\n","    test_X, test_y = X[test_indices], y[test_indices]\n","    \n","    # Train the logistic regression models using batch gradient descent, mini-batch gradient descent, and stochastic gradient descent\n","    learning_rates = [0.01, 0.001, 0.0001]\n","    num_iters = 10\n","    batch_size = 32\n","    thresholds = [0.3, 0.4, 0.5, 0.6, 0.7]\n","\n","    models = {}\n","\n","    for lr in learning_rates:\n","        models[f'BGD {lr}'] = batch_gradient_descent(train_X, train_y, alpha=lr, num_iters=num_iters)\n","        models[f'MBGD {lr}'] = minibatch_gradient_descent(train_X, train_y, batch_size=batch_size, alpha=lr, num_iters=num_iters)\n","        models[f'SGD {lr}'] = stochastic_gradient_descent(train_X, train_y, alpha=lr, num_iters=num_iters)\n","\n","    # Evaluate testing accuracy and cost for each model and threshold\n","    for j, (key, value) in enumerate(models.items()):\n","        theta = value[0]\n","        for k, threshold in enumerate(thresholds):\n","            accuracy = test_accuracy(test_X, test_y, theta, threshold)\n","            accuracies[j, k, i] = accuracy\n","        cost_history[j, :, i] = value[1]\n","\n","# Compute the average performance metrics over 10 random splits\n","avg_accuracies = np.mean(accuracies, axis=2)\n","avg_cost_history = np.mean(cost_history, axis=2)\n","\n","# Print the average accuracies\n","for j, (key, value) in enumerate(models.items()):\n","    for k, threshold in enumerate(thresholds):\n","        print(f'Average {key} accuracy with threshold {threshold}: {avg_accuracies[j, k]}')\n","\n","# Plot the average learning curves for each model\n","for j, (key, value) in enumerate(models.items()):\n","    plt.plot(avg_cost_history[j], label=key)\n","plt.title('Average Learning Curves')\n","plt.xlabel('Number of Iterations')\n","plt.ylabel('Cost')\n","plt.legend()\n","plt.show()"],"metadata":{"id":"ENQ0GOzbWImy"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":353},"id":"DO_u8fOHR0ZC","executionInfo":{"status":"error","timestamp":1679492802686,"user_tz":-330,"elapsed":2238,"user":{"displayName":"Satyam Gupta","userId":"14257552402479889297"}},"outputId":"e634b203-b8c1-4aa7-cca6-f1bffa989b41"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-3-4a87b949ab99>:26: RuntimeWarning: divide by zero encountered in log\n","  cost = (-1/m) * np.sum(y*np.log(h) + (1-y)*np.log(1-h))\n","<ipython-input-3-4a87b949ab99>:26: RuntimeWarning: invalid value encountered in multiply\n","  cost = (-1/m) * np.sum(y*np.log(h) + (1-y)*np.log(1-h))\n","<ipython-input-3-4a87b949ab99>:19: RuntimeWarning: overflow encountered in exp\n","  return 1 / (1 + np.exp(-z))\n"]},{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-8-35256b6811e1>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     41\u001b[0m             \u001b[0maccuracy\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtest_accuracy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtest_X\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest_y\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtheta\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mthreshold\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     42\u001b[0m             \u001b[0maccuracies\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mk\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0maccuracy\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 43\u001b[0;31m         \u001b[0mcost_history\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     44\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     45\u001b[0m \u001b[0;31m# Compute the average performance metrics over 10 random splits\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: could not broadcast input array from shape (3810,) into shape (10,)"]}]}]}